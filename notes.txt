Python Advanced
===============

8-11 May 2023
Toby Dussek


9:30 start
11:00 coffee (15 mins)
12:30 lunch (1 hr)
3:00 tea (15 mins)
4:30 end

- you will need: a copy of Python 3.x (real or virtual)
- an editor: VS Code, PyCharm, Spyder etc...
- internet, able to install python libraries (e.g. requests library)

Python code lives in classes (or in functions), in modules, which live in packages (folders)

Tuesday
> intro and welcome
  > what do you currently know
  > what do you want to know
> classes 
- abstract and concrete classes
> validate types
> inheritance
> name mangled members
> if __name__== '__main__': revisited
> using decorators
>s after lunch review
> instrinsics
> functional programming: map, filter and reduce
> functional programming: parameters
- comprehensions, generators and yield
> Loading local and remote data (requests)

Wednesday
- processing text/json
  - json.loads() takes JSON and returns Python structure
  - json.dumps() takes Python structure and returns JSON
- persisting files: read/write/append/exclusive/overwrite, text, bytes, json
- databases
  see https://wiki.python.org/moin/DatabaseProgramming
- other db connections
- Create, Read and Update (and DELETE) - CRUD operations
- populate db with sample data
- read and nicely format values from the db
- explore 'typicode' API as a static data source for JSON
- after lunch review exercise 
  ask questions, help each other, share code (screen-share)
- we will be using the 'requests' library
  (you may come across the urllib.requests which is the old-skool way of doing things)

Thursday
- context manager - switch context e.g. for handling data input and output
- networking server/client (microservices)
- overview of Flask
- Testing: 
  - doctest revisited
  see https://docs.python.org/3/library/doctest.html
  - unittest
- after lunch lab exercise
- pytest see https://docs.pytest.org/

Friday
- profiling: timings etc. (cprofile)
- multithreading, also limits of mutlithreading concurrency
- the global Interpreter Lock (GIL) will affect threading performance
- Python has -O to optimize code (especially useful for threading)
- after lunch lab exercise
- logging - context mgr, often we log by time-stamp
- iterators __iter__
- named tuple
- zip
- deque, defaultdict etc
- end of course feedback






Useful Resources
- https://pynative.com/python-exercises-with-solutions/
- https://realpython.com/
- moving from Py2 to Py3
  https://docs.python.org/3/howto/pyporting.html




